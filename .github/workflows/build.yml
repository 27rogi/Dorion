name: Build

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/build.yml'
      - 'package.json'
      - 'src-tauri/**/*'
      - 'src/**/*'
      - 'updater/**/*'
  pull_request:
    paths:
      - '.github/workflows/build.yml'
      - 'package.json'
      - 'src-tauri/**/*'
      - 'src/**/*'
      - 'updater/**/*'

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  CARGO_INCREMENTAL: 0

jobs:
  build:
    runs-on: ${{ matrix.config.platform }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - platform: ubuntu-latest
            target: 'x86_64-unknown-linux-gnu'
          - platform: ubuntu-latest
            target: 'aarch64-unknown-linux-gnu'
          - platform: ubuntu-latest
            target: 'armv7-unknown-linux-gnueabihf'

          - platform: macos-latest
            target: 'x86_64-apple-darwin'
          - platform: macos-latest
            target: 'aarch64-apple-darwin'

          - platform: windows-latest
            target: 'x86_64-pc-windows-msvc'
          - platform: windows-latest
            target: 'aarch64-pc-windows-msvc'

    steps:
      - uses: actions-rust-lang/setup-rust-toolchain@v1.8
      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
            updater/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: (Linux) Install dependencies
        if: matrix.config.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Add target
        run: rustup target add ${{ matrix.config.target }}

      - name: Build updater
        run: pnpm build:updater
        env:
          RUSTFLAGS: -Awarnings

      - name: Install dependencies
        run: pnpm install && pnpm shupdate
          
      - name: Build
        # Include seperate targets for MacOS since it needs to build for both aarch64 and x86_64
        run: pnpm tauri build --target ${{ matrix.config.target }}
        env:
          RUSTFLAGS: -Awarnings
      
      # Make empty folders for plugins and themes
      - name: (Windows) Create empty folders for plugins
        if: matrix.config.platform == 'windows-latest'
        continue-on-error: true
        run: mkdir src-tauri/target/${{ matrix.config.target }}/release/themes && mkdir src-tauri/target/${{ matrix.config.target }}/release/plugins

      # Empty folders, unix edition
      - name: (Unix) Create empty folders for plugins and themes
        if: matrix.config.platform != 'windows-latest'
        run: mkdir -p src-tauri/target/${{ matrix.config.target }}/release/plugins && mkdir -p src-tauri/target/${{ matrix.config.target }}/release/themes

      - name: Create empty config.json
        run: cd src-tauri/target/${{ matrix.config.target }}/release && echo {} > config.json
        
      # paths:
      # Windows:
      # - src-tauri/target/${{ matrix.config.target }}/release/Dorion.exe|config.json|plugins|themes|injection|icons
      # Ubuntu:
      # - src-tauri/target/${{ matrix.config.target }}/release/dorion|config.json|plugins|themes|injection|icons
      # MacOS:
      # - src-tauri/target/${{ matrix.config.target }}/release/bundle/macos/Dorion.app
      - name: (Windows) Compress build
        if: matrix.config.platform == 'windows-latest'
        run: 7z a -tzip -mx9 Dorion.zip 
          src-tauri/target/${{ matrix.config.target }}/release/Dorion.exe
          src-tauri/target/${{ matrix.config.target }}/release/config.json
          src-tauri/target/${{ matrix.config.target }}/release/updater.exe
          src-tauri/target/${{ matrix.config.target }}/release/plugins/
          src-tauri/target/${{ matrix.config.target }}/release/themes/
          src-tauri/target/${{ matrix.config.target }}/release/icons/
          src-tauri/target/${{ matrix.config.target }}/release/injection/

      - name: (Linux) Compress build
        if: matrix.config.platform == 'ubuntu-latest'
        run: cd src-tauri/target/${{ matrix.config.target }}/release && tar -czvf dorion.tar.gz dorion config.json updater ./plugins ./themes ./injection ./icons

      # Windows portable
      - name: (Windows) Upload portable
        if: matrix.config.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: dorion-${{ matrix.config.target }}-portable
          path: Dorion.zip

      # Windows MSI
      - name: (Windows) Upload .msi
        if: matrix.config.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: dorion-${{ matrix.config.target }}-msi
          path: src-tauri/target/${{ matrix.config.target }}/release/bundle/msi/*.msi

      # Ubuntu portable
      - name: (Linux) Upload portable
        if: matrix.config.platform == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: dorion-${{ matrix.config.target }}-portable
          path: src-tauri/target/${{ matrix.config.target }}/release/dorion.tar.gz

      # Ubuntu deb
      - name: (Linux) Upload .deb
        if: matrix.config.platform == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: dorion-${{ matrix.config.target }}-deb
          path: src-tauri/target/${{ matrix.config.target }}/release/bundle/deb/*.deb

      - name: (Linux) Upload .appimage
        if: matrix.config.platform == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: dorion-${{ matrix.config.target }}-appimage
          path: src-tauri/target/${{ matrix.config.target }}/release/bundle/appimage/*.AppImage

      - name: (MacOS) Upload .dmg
        if: matrix.config.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: dorion-${{ matrix.config.target }}-dmg
          path: src-tauri/target/${{ matrix.config.target }}/release/bundle/dmg/*.dmg

  # build-arm:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2
      
  #     - name: Setup node
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 18

  #     - name: Install Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable

  #     - name: Install Linux dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y build-essential \
  #           curl \
  #           wget \
  #           libssl-dev \
  #           libgtk-3-dev \
  #           libayatana-appindicator3-dev \
  #           librsvg2-dev \
  #           gcc-aarch64-linux-gnu

  #     - name: Add arm64 jammy sources to sources.list
  #       run: sudo sh -c "echo 'deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse' >> /etc/apt/sources.list"

  #     - name: Install libwebkitgtk
  #       run: sudo apt update && sudo apt install libwebkit2gtk-4.0-dev:arm64

  #     - name: Set PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu/
  #       run: export PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu/

  #     - name: Install armv8 target
  #       run: rustup target add aarch64-unknown-linux-gnu

  #     - name: Install deps and build
  #       run: pnpm install && pnpm shupdate && pnpm build:js && pnpm build && pnpm tauri build --target aarch64-unknown-linux-gnu

  #     - name: Create empty folders for plugins and themes for armv8
  #       run: mkdir src-tauri/target/aarch64-unknown-linux-gnu/release/plugins && mkdir src-tauri/target/aarch64-unknown-linux-gnu/release/themes

  #     - name: Create empty config.json for armv8
  #       run: cd src-tauri/target/aarch64-unknown-linux-gnu/release && touch config.json

  #     - name: Compress build for armv8
  #       run: cd src-tauri/target/aarch64-unknown-linux-gnu/release && tar -czvf dorion_armv8.tar.gz dorion config.json ./plugins ./themes ./injection ./icons

  #     - name: Upload Linux portable for armv8
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: Dorion_armv8_portable.tar.gz
  #         path: src-tauri/target/aarch64-unknown-linux-gnu/release/dorion_armv8.tar.gz

  #     - name: Upload Linux deb for armv8
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: Dorion_armv8_deb.tar.gz
  #         path: src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb/*.deb
